name: Go

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Run Tests
        run: go test -v ./...

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        target:
          - { os: "linux",  arch: "amd64" }
          - { os: "linux",  arch: "arm64" }
          - { os: "windows", arch: "amd64" }
          - { os: "windows", arch: "arm64" }
          - { os: "darwin",  arch: "amd64" }
          - { os: "darwin",  arch: "arm64" }
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Build Binary
        env:
          GOOS: ${{ matrix.target.os }}
          GOARCH: ${{ matrix.target.arch }}
        run: |
          mkdir -p dist
          os="${{ matrix.target.os }}"
          arch="${{ matrix.target.arch }}"

          # Map OS to abbreviation
          if [ "$os" = "windows" ]; then
            os_abbr="win"
          elif [ "$os" = "darwin" ]; then
            os_abbr="mac"
          else
            os_abbr="$os"
          fi

          # Map architecture to abbreviation
          if [ "$arch" = "amd64" ]; then
            if [ "$os" = "linux" ]; then
              arch_abbr="amd"
            else
              arch_abbr="x64"
            fi
          else
            arch_abbr="$arch"
          fi

          output="radio-javan-${os_abbr}-${arch_abbr}"
          if [ "$os" = "windows" ]; then
            output="$output.exe"
          fi
          echo "Building $output for $os ($arch)"
          go build -v -o dist/$output .

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: binary-${{ matrix.target.os }}-${{ matrix.target.arch }}
          path: dist/

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: release-artifacts

      - name: Gather Artifacts
        run: |
          mkdir -p assets
          find release-artifacts -type f -exec cp {} assets/ \;

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref }}
          files: assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
